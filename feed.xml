<feed xmlns="http://www.w3.org/2005/Atom"> <id>/</id><title>Richard Hernandez</title><subtitle>Collections of notes, and things I find interesting.</subtitle> <updated>2022-02-01T20:01:15-05:00</updated> <author> <name>Richard Hernandez</name> <uri>/</uri> </author><link rel="self" type="application/atom+xml" href="/feed.xml"/><link rel="alternate" type="text/html" hreflang="en-US" href="/"/> <generator uri="https://jekyllrb.com/" version="4.2.1">Jekyll</generator> <rights> © 2022 Richard Hernandez </rights> <icon>/assets/img/favicons/favicon.ico</icon> <logo>/assets/img/favicons/favicon-96x96.png</logo> <entry><title>C++ 11 Features</title><link href="/posts/C++11/" rel="alternate" type="text/html" title="C++ 11 Features" /><published>2021-10-02T02:10:00-04:00</published> <updated>2021-10-02T02:10:00-04:00</updated> <id>/posts/C++11/</id> <content src="/posts/C++11/" /> <author> <name>Richard Hernandez</name> </author> <category term="C++" /> <category term="C++11" /> <summary> C++ 11 Link to Video This are notes taking from videos in BoQian Channel, for learning purpose. Initializer List //C++ 03 initializer list: int arr[4] = {3, 2, 4, 5}; vector&amp;lt;int&amp;gt; v; v.push_back(3); v.push_back(2); v.push_back(4); v.push_back(5); // C++ 11 extended the support vector&amp;lt;int&amp;gt; v = {3, 4, 1, 9}; // Calling initializer_list constructor // All the relevant STL c... </summary> </entry> <entry><title>C++ Compiler Generated Functions</title><link href="/posts/C++-Compiler-Generated-Functions/" rel="alternate" type="text/html" title="C++ Compiler Generated Functions" /><published>2021-09-19T22:10:00-04:00</published> <updated>2021-09-19T22:10:00-04:00</updated> <id>/posts/C++-Compiler-Generated-Functions/</id> <content src="/posts/C++-Compiler-Generated-Functions/" /> <author> <name>Richard Hernandez</name> </author> <category term="C++" /> <category term="C++ Generated Functions" /> <summary> What are generated functions: Reference: Video This are functions that the compiler adds when you don’t explicitly declare them(only if is required): Copy constructor Copy Assigment Operator Destructor Default constructor (only if there is not contructor declared) class Dog{}; // similar to class Dog{ dog(const dog&amp;amp; rhs) {...} //Member by Member initialization dog&amp;a... </summary> </entry> <entry><title>C++ Const Keyword</title><link href="/posts/C++-const-keyword/" rel="alternate" type="text/html" title="C++ Const Keyword" /><published>2021-08-08T02:10:00-04:00</published> <updated>2021-09-20T12:25:21-04:00</updated> <id>/posts/C++-const-keyword/</id> <content src="/posts/C++-const-keyword/" /> <author> <name>Richard Hernandez</name> </author> <category term="C++" /> <category term="C++ const" /> <summary> const with functions Reference: Video Using const in methods examples, and can be used for more efficiency. class Dog { // Class Memebers int age; string name; public: Dog() {age =3; name = "dummy";} // Const parameter void setAge (const int&amp;amp; a ) {age = a;} // Correct[ pass by reference and can't be changed] void setAge (const int a ) {age = a;} // ... </summary> </entry> <entry><title>C++ Streams</title><link href="/posts/C++-Streams/" rel="alternate" type="text/html" title="C++ Streams" /><published>2021-08-08T02:10:00-04:00</published> <updated>2021-08-28T23:42:43-04:00</updated> <id>/posts/C++-Streams/</id> <content src="/posts/C++-Streams/" /> <author> <name>Richard Hernandez</name> </author> <category term="C++" /> <category term="C++ Streams" /> <summary> Intro: Link What is stream?: Serial IO Interferface to external devices (file, stdin/stdout, network, etc.) string s("Hello"); s[3] = 't'; // Random access //cout[3] = 't'; // Error { ofstream of("MyLog.txt"); // Creates a new file for write, if the file didn't exist of &amp;lt;&amp;lt; "Text" &amp;lt;&amp;lt; endl; of &amp;lt;&amp;lt; 234 &amp;lt;&amp;lt;endl; of &amp;lt;&amp;lt; 2.3 &amp;lt;&amp;lt;endl; of &amp;lt;&amp;lt; bitset&amp;lt;8&amp;gt;(14... </summary> </entry> <entry><title>Terrain Generator using Perlin Noise</title><link href="/posts/terraingen-v2/" rel="alternate" type="text/html" title="Terrain Generator using Perlin Noise" /><published>2021-05-01T23:32:00-04:00</published> <updated>2021-08-28T19:25:16-04:00</updated> <id>/posts/terraingen-v2/</id> <content src="/posts/terraingen-v2/" /> <author> <name>Richard Hernandez</name> </author> <category term="Projects" /> <category term="P5" /> <summary> Toggle Rotate/Move: this button will allow you to move using the arrow keys. Toggle Boxes: This will show the boxes that make up the terrain. Information The code for this project can be found on the following links: See Code FullScreen This project uses perlin noise to generate the height of the cubes and apply color. These then are categorized as mountains, grass, snow... </summary> </entry> </feed>
